#! @shell@

# TODO: Make interruptible/atomic
# TODO: Use correct ssh port? (can change over a deploy)
HOSTNAME=@hostname@
HOST=@host@
SYSTEM=@systembuild@
SWITCH=@switch@

SSH_OPTS="-o BatchMode=yes"

# Prefix all output with host name
# From https://unix.stackexchange.com/a/440439/214651
exec > >(sed "s/^/[$HOSTNAME] /")
exec 2> >(sed "s/^/[$HOSTNAME] /" >&2)

# TODO: What about GC?
# TODO: Generate hardware-config every time?

echo "Connecting to host..." >&2

OLDSYSTEM=$(timeout 5 ssh $SSH_OPTS $HOST realpath /run/current-system)
if [ $? -ne 0 ]; then
  echo "Unable to connect to host!" >&2
  exit 1
fi

set -e

if [ "$OLDSYSTEM" == "$SYSTEM" ]; then
  echo "No deploy necessary" >&2
  exit 0
fi

echo "Copying closure to host..." >&2
nix-copy-closure -s --to $HOST $SYSTEM $SWITCH


echo "Triggering system switcher..." >&2
id=$(ssh $SSH_OPTS $HOST "$SWITCH/bin/switch" start $SYSTEM)


echo "Trying to confirm success..." >&2
set +e
prevstatus="unknown"
prevactive=0
active=1
while [ "$active" != 0 ]; do
	# TODO: Because of the imperative network-setup script, when e.g. the defaultGateway is removed, the previous entry is still persisted on a rebuild switch, even though with a reboot it wouldn't. Maybe use the more modern and declarative networkd to get around this
	status=$(timeout 5 ssh -o ControlPath=none $SSH_OPTS $HOST "$SWITCH/bin/switch" active "$id")
	active=$?
	sleep 1
done

case "$status" in
	"success")
		echo "Successfully activated new system!" >&2
		;;
	"failure")
		echo "Failed to activate new system! Rolled back to previous one" >&2
		# TODO: Try to show what failed
		#ssh $SSH_OPTS $HOST cat /var/lib/system-switcher/system-$id/log
		;;
	*)
	  echo "This shouldn't occur!" >&2
		;;
esac
